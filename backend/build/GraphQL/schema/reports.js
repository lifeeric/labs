"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
exports.default = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  extend type Query {\n    getReports(id: ID!, patient_id: Int): [getReportUnion]!\n    getProfit(id: ID!, date: String): [GetLabProfitUnion]!\n    getTotalRecord(id: ID!): getTotalRecordUnion!\n  }\n\n  union GetLabProfitUnion = GetLabProfit | Error\n\n  type GetLabProfit {\n    totalPrice: Float!\n    id: ChartPieace\n  }\n\n  type ChartPieace {\n    _id: ID!\n    date: String!\n  }\n\n  union getTotalRecordUnion = getTotalRecordResult | Error\n\n  type getTotalRecordResult {\n    level: String!\n    totalTests: Float!\n  }\n\n  union getReportUnion = Error | getReportResult\n\n  extend type Mutation {\n    addReport(add: addReport!): ReportUnion!\n  }\n\n  union ReportUnion = getReportResult | Error\n\n  input addReport {\n    id: ID!\n    patient_id: Int\n    patient_name: String!\n    patient_referedby: String!\n    patient_age: Int!\n    patient_sex: String!\n    price: Float!\n    date: String!\n    tests: [TESTS]!\n  }\n\n  input TESTS {\n    id: Int!\n    name: String!\n    test: [ATest]!\n  }\n\n  input ATest {\n    test_name: String!\n    normalRanges: [String]!\n    unit: String!\n    results: String!\n  }\n\n  type getReportResult {\n    id: ID!\n    patient_id: Int\n    patient_name: String!\n    patient_referedby: String!\n    patient_age: Int!\n    patient_sex: String!\n    price: Float!\n    date: String!\n    tests: [getAllTestResult]!\n  }\n\n  type getAllTestResult {\n    id: Int!\n    name: String!\n    test: [Results]!\n  }\n\n  type Results {\n    test_name: String!\n    normalRanges: [String]!\n    unit: String!\n    results: String\n  }\n"], ["\n  extend type Query {\n    getReports(id: ID!, patient_id: Int): [getReportUnion]!\n    getProfit(id: ID!, date: String): [GetLabProfitUnion]!\n    getTotalRecord(id: ID!): getTotalRecordUnion!\n  }\n\n  union GetLabProfitUnion = GetLabProfit | Error\n\n  type GetLabProfit {\n    totalPrice: Float!\n    id: ChartPieace\n  }\n\n  type ChartPieace {\n    _id: ID!\n    date: String!\n  }\n\n  union getTotalRecordUnion = getTotalRecordResult | Error\n\n  type getTotalRecordResult {\n    level: String!\n    totalTests: Float!\n  }\n\n  union getReportUnion = Error | getReportResult\n\n  extend type Mutation {\n    addReport(add: addReport!): ReportUnion!\n  }\n\n  union ReportUnion = getReportResult | Error\n\n  input addReport {\n    id: ID!\n    patient_id: Int\n    patient_name: String!\n    patient_referedby: String!\n    patient_age: Int!\n    patient_sex: String!\n    price: Float!\n    date: String!\n    tests: [TESTS]!\n  }\n\n  input TESTS {\n    id: Int!\n    name: String!\n    test: [ATest]!\n  }\n\n  input ATest {\n    test_name: String!\n    normalRanges: [String]!\n    unit: String!\n    results: String!\n  }\n\n  type getReportResult {\n    id: ID!\n    patient_id: Int\n    patient_name: String!\n    patient_referedby: String!\n    patient_age: Int!\n    patient_sex: String!\n    price: Float!\n    date: String!\n    tests: [getAllTestResult]!\n  }\n\n  type getAllTestResult {\n    id: Int!\n    name: String!\n    test: [Results]!\n  }\n\n  type Results {\n    test_name: String!\n    normalRanges: [String]!\n    unit: String!\n    results: String\n  }\n"])));
var templateObject_1;
