"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
exports.default = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  extend type Query {\n    login(email: String!, password: String!): LoginUnion!\n    # forgotPassword(email: String!): ForgotPassUnion!\n    forgotPassword(email: String!): Error!\n    userSetting(id: ID!): UserSettingUnion!\n  }\n\n  union LoginUnion = LoginUserResult | Error\n\n  type LoginUserResult {\n    _id: ID!\n    email: String!\n    token: String!\n  }\n\n  # union ForgotPassUnion = ForgetPassordResult | Error\n\n  type ForgetPassordResult {\n    id: ID!\n    email: String!\n    token: String!\n  }\n\n  union UserSettingUnion = GetUserSettingResult | Error\n\n  type GetUserSettingResult {\n    name: String!\n    email: String!\n    company: String\n    refered: [GetReferedResult]\n  }\n\n  type GetReferedResult {\n    company: String!\n    name: String!\n  }\n\n  extend type Mutation {\n    createUser(user: addNewUser): UserUnion!\n    resetPassword(\n      id: ID!\n      validateURL: Boolean\n      password: String\n      passwordAgain: String\n    ): Error!\n    updateUserSetting(\n      id: ID!\n      name: String!\n      email: String!\n      company: String!\n    ): UserSettingUnion!\n    updatePassword(\n      id: ID!\n      oldPassword: String!\n      newPassword: String!\n      newPasswordAgain: String!\n    ): Error!\n  }\n\n  union UserUnion = UserResult | Error\n\n  input addNewUser {\n    name: String!\n    email: String!\n    password: String!\n    company: String\n    referedBy: ID\n  }\n\n  type UserResult {\n    _id: ID!\n    name: String!\n    email: String!\n    password: String\n    company: String\n  }\n"], ["\n  extend type Query {\n    login(email: String!, password: String!): LoginUnion!\n    # forgotPassword(email: String!): ForgotPassUnion!\n    forgotPassword(email: String!): Error!\n    userSetting(id: ID!): UserSettingUnion!\n  }\n\n  union LoginUnion = LoginUserResult | Error\n\n  type LoginUserResult {\n    _id: ID!\n    email: String!\n    token: String!\n  }\n\n  # union ForgotPassUnion = ForgetPassordResult | Error\n\n  type ForgetPassordResult {\n    id: ID!\n    email: String!\n    token: String!\n  }\n\n  union UserSettingUnion = GetUserSettingResult | Error\n\n  type GetUserSettingResult {\n    name: String!\n    email: String!\n    company: String\n    refered: [GetReferedResult]\n  }\n\n  type GetReferedResult {\n    company: String!\n    name: String!\n  }\n\n  extend type Mutation {\n    createUser(user: addNewUser): UserUnion!\n    resetPassword(\n      id: ID!\n      validateURL: Boolean\n      password: String\n      passwordAgain: String\n    ): Error!\n    updateUserSetting(\n      id: ID!\n      name: String!\n      email: String!\n      company: String!\n    ): UserSettingUnion!\n    updatePassword(\n      id: ID!\n      oldPassword: String!\n      newPassword: String!\n      newPasswordAgain: String!\n    ): Error!\n  }\n\n  union UserUnion = UserResult | Error\n\n  input addNewUser {\n    name: String!\n    email: String!\n    password: String!\n    company: String\n    referedBy: ID\n  }\n\n  type UserResult {\n    _id: ID!\n    name: String!\n    email: String!\n    password: String\n    company: String\n  }\n"])));
var templateObject_1;
