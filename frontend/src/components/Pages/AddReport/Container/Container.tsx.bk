import * as React from "react"
import { useState, useRef } from "react"
import { SearchTest } from "../SearchTest/SearchTest"
import { Test } from "../Test/Test"
import { PatientsFields } from "../PatientsFields/PatientsFields"
import { Button, Divider } from "@material-ui/core"
import styled from "styled-components"
import { tests, ITest } from "../../../../utils/tests"
import { ComponentToPrint } from "../PrintTemplate/PrintTemplate"
import ReactToPrint from "react-to-print"
import { useMutation } from "@apollo/client"
import { ADD_REPORT } from "../../../../utils/gql"
import { customHook } from "../../../../utils/customHook"

/**
 * Styled Compoennts
 */

const FloatRight = styled.div`
  display: flex;
  justify-content: flex-end;
  width: 100%;
  padding: 10px;
  box-sizing: border-box;
`

interface Props {}

const Center = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 25px;
`

interface IPatient {
  name: string
  referedby: string
  sex: string
  age: number
  date: string
}
export const Container: React.FC<Props> = ({}) => {
  const [resultData, setResultData] = useState<ITest[]>([])
  const [patientData, setPatientData] = useState<IPatient | undefined>()
  const componentRef = useRef<any>()
  const [sex, setSex] = React.useState("")
  const [name, setName] = useState<string>("")
  const [referedBy, setReferedBy] = useState<string>("")
  const [age, setAge] = useState<string>("")
  const [PID, setPID] = useState<number>()
  const [cost, setCost] = useState<string>("")
  const [addReport, { data, loading }] = useMutation(ADD_REPORT)
  const { currentUser } = customHook()
  const elementRef = useRef(null)

  const onButtonClick = () => {
    // `current` points to the mounted text input element
    elementRef.current
    console.log(elementRef.current.value, " => Input Ref value")
  }
  console.log(elementRef.current.value, " => Input Ref value")


  const addResultHandler = (value: any) => {
    console.log(value)
    if (!value) return
    setResultData((resultData: ITest[]) => [...resultData, value])
  }

  const changeResultsHandler = (
    e: React.ChangeEvent<HTMLInputElement>,
    id: number,
    index: number
  ) => {
    const newValue = e.target.value
    const newResults = [...resultData[id].test]
    newResults[index].results = newValue
    const newData = [...resultData]
    newData[id].test = newResults
    setResultData(newData)
  }

  const filterResultHandler = (id: number) => {
    const oldResultData: ITest[] = [...resultData]

    const newResultData = oldResultData.filter(data => data.id !== id)
    setResultData(newResultData)
  }

  const printOut = () => {
    return (
      <Button variant="contained" color="primary">
        Print out
      </Button>
    )
  }

  /**
   * Patient Data
   */
  const patientIdHandler = (e: any): void => {
    const name = e.target.value
    setPID(name)
  }

  const nameHandler = (e: any): void => {
    const name = e.target.value
    setName(name)
  }

  const referedByHandler = (e: any): void => {
    const name = e.target.value
    setReferedBy(name)
  }

  const ageHandler = (e: any): void => {
    const name = e.target.value
    setAge(name)
  }

  const costHandler = (e: any): void => {
    const name = e.target.value
    setCost(name)
  }

  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    setSex(event.target.value as string)
  }
  const submitHandler = () => {
    addReport({
      variables: {
        id: currentUser._id,
        patient_id: "",
        patient_name: name,
        patient_age: Number(age),
        patient_sex: sex,
        patient_referdby: referedBy,
        date: new Date().toISOString(),
        price: Number(cost),
        tests: resultData,
      },
    })
  }

  return (
    <>
      <input type="text" ref={elementRef} />
      <button onClick={onButtonClick}>Focus the input</button>
      <PatientsFields
        nameHandler={nameHandler}
        referedByHandler={referedByHandler}
        ageHandler={ageHandler}
        costHandler={costHandler}
        handleChange={handleChange}
        name={name}
        age={age}
        referedBy={referedBy}
        sex={sex}
        cost={cost}
        PID={PID}
        patientIdHandler={patientIdHandler}
      />
      <Divider />
      <Center>
        <SearchTest addResult={addResultHandler} dropList={tests} />
      </Center>
      <Test
        resultData={resultData}
        changeResult={changeResultsHandler}
        filterResult={filterResultHandler}
      />

      <FloatRight>
        <Button onClick={submitHandler}>Save</Button>
        <ReactToPrint
          trigger={printOut}
          content={() => componentRef.current}
          // pageStyle={style}
        />
        <div style={{ display: "none" }}>
          <ComponentToPrint
            ref={componentRef}
            //   data={patientData}
            name={name}
            age={age}
            referedBy={referedBy}
            sex={sex}
            PrintResult={
              <Test
                resultData={resultData}
                changeResult={changeResultsHandler}
                filterResult={filterResultHandler}
              />
            }
          />
        </div>
      </FloatRight>
    </>
  )
}
