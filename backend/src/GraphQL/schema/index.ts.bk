import { gql } from "apollo-server-express";

export default gql`
  type Query {
    login(email: String!, password: String!): LoginUnion!
    forgotPassword(email: String!): ForgotPassUnion!
    userSetting(id: ID!): UserSettingUnion!
    getExpenses(id: ID!): [getExpensesUnion]!
  }

  union LoginUnion = LoginUserResult | Error

  type LoginUserResult {
    _id: ID!
    email: String!
    token: String!
  }

  union ForgotPassUnion = ForgetPassordResult | Error

  type ForgetPassordResult {
    id: ID!
    email: String!
    token: String!
  }

  union UserSettingUnion = GetUserSettingResult | Error

  type GetUserSettingResult {
    name: String!
    email: String!
    company: String
    refered: [GetReferedResult]
  }

  type GetReferedResult {
    company: String!
    name: String!
  }

  union getExpensesUnion = GetExpensesResult | Error

  type GetExpensesResult {
    id: ID!
    name: String!
    description: String!
    price: Float!
    date: String!
  }

  type Mutation {
    createUser(user: addNewUser): UserUnion!
    resetPassword(id: ID!, password: String, passwordAgain: String): Error!
    updateUserSetting(
      id: ID!
      name: String!
      email: String!
      company: String!
    ): UserSettingUnion!
    updatePassword(
      id: ID!
      oldPassword: String!
      newPassword: String!
      newPasswordAgain: String!
    ): Error!
    addExpenses(add: addNewExpenses): ExpensesUnion!
  }

  union UserUnion = UserResult | Error

  input addNewUser {
    name: String!
    email: String!
    password: String!
    company: String
    referedBy: ID
  }

  input addNewExpenses {
    id: ID!
    name: String!
    description: String!
    price: Float!
    date: String!
  }

  type UserResult {
    _id: ID!
    name: String!
    email: String!
    password: String
    company: String
  }

  union ExpensesUnion = GetExpensesResult | Error

  type Error {
    error: Boolean!
    message: String!
  }
`;
